{"ast":null,"code":"import { EventType, IncrementalSource } from '../types.js';\n\nvar Timer = function () {\n  function Timer(actions, speed) {\n    if (actions === void 0) {\n      actions = [];\n    }\n\n    this.timeOffset = 0;\n    this.raf = null;\n    this.actions = actions;\n    this.speed = speed;\n  }\n\n  Timer.prototype.addAction = function (action) {\n    var index = this.findActionIndex(action);\n    this.actions.splice(index, 0, action);\n  };\n\n  Timer.prototype.addActions = function (actions) {\n    this.actions = this.actions.concat(actions);\n  };\n\n  Timer.prototype.start = function () {\n    this.timeOffset = 0;\n    var lastTimestamp = performance.now();\n    var actions = this.actions;\n    var self = this;\n\n    function check() {\n      var time = performance.now();\n      self.timeOffset += (time - lastTimestamp) * self.speed;\n      lastTimestamp = time;\n\n      while (actions.length) {\n        var action = actions[0];\n\n        if (self.timeOffset >= action.delay) {\n          actions.shift();\n          action.doAction();\n        } else {\n          break;\n        }\n      }\n\n      if (actions.length > 0 || self.liveMode) {\n        self.raf = requestAnimationFrame(check);\n      }\n    }\n\n    this.raf = requestAnimationFrame(check);\n  };\n\n  Timer.prototype.clear = function () {\n    if (this.raf) {\n      cancelAnimationFrame(this.raf);\n      this.raf = null;\n    }\n\n    this.actions.length = 0;\n  };\n\n  Timer.prototype.setSpeed = function (speed) {\n    this.speed = speed;\n  };\n\n  Timer.prototype.toggleLiveMode = function (mode) {\n    this.liveMode = mode;\n  };\n\n  Timer.prototype.isActive = function () {\n    return this.raf !== null;\n  };\n\n  Timer.prototype.findActionIndex = function (action) {\n    var start = 0;\n    var end = this.actions.length - 1;\n\n    while (start <= end) {\n      var mid = Math.floor((start + end) / 2);\n\n      if (this.actions[mid].delay < action.delay) {\n        start = mid + 1;\n      } else if (this.actions[mid].delay > action.delay) {\n        end = mid - 1;\n      } else {\n        return mid + 1;\n      }\n    }\n\n    return start;\n  };\n\n  return Timer;\n}();\n\nfunction addDelay(event, baselineTime) {\n  if (event.type === EventType.IncrementalSnapshot && event.data.source === IncrementalSource.MouseMove) {\n    var firstOffset = event.data.positions[0].timeOffset;\n    var firstTimestamp = event.timestamp + firstOffset;\n    event.delay = firstTimestamp - baselineTime;\n    return firstTimestamp - baselineTime;\n  }\n\n  event.delay = event.timestamp - baselineTime;\n  return event.delay;\n}\n\nexport { Timer, addDelay };","map":null,"metadata":{},"sourceType":"module"}