{"ast":null,"code":"var NodeType;\n\n(function (NodeType) {\n  NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n  NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n  NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n  NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n  NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n  NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType || (NodeType = {}));\n\nfunction isElement(n) {\n  return n.nodeType === n.ELEMENT_NODE;\n}\n\nfunction isShadowRoot(n) {\n  var _a;\n\n  var host = (_a = n) === null || _a === void 0 ? void 0 : _a.host;\n  return Boolean(host && host.shadowRoot && host.shadowRoot === n);\n}\n\nfunction maskInputValue(_a) {\n  var maskInputOptions = _a.maskInputOptions,\n      tagName = _a.tagName,\n      type = _a.type,\n      value = _a.value,\n      maskInputFn = _a.maskInputFn;\n  var text = value || '';\n\n  if (maskInputOptions[tagName.toLowerCase()] || maskInputOptions[type]) {\n    if (maskInputFn) {\n      text = maskInputFn(text);\n    } else {\n      text = '*'.repeat(text.length);\n    }\n  }\n\n  return text;\n}\n\nvar ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\n\nfunction is2DCanvasBlank(canvas) {\n  var ctx = canvas.getContext('2d');\n  if (!ctx) return true;\n  var chunkSize = 50;\n\n  for (var x = 0; x < canvas.width; x += chunkSize) {\n    for (var y = 0; y < canvas.height; y += chunkSize) {\n      var getImageData = ctx.getImageData;\n      var originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData ? getImageData[ORIGINAL_ATTRIBUTE_NAME] : getImageData;\n      var pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\n      if (pixelBuffer.some(function (pixel) {\n        return pixel !== 0;\n      })) return false;\n    }\n  }\n\n  return true;\n}\n\nvar _id = 1;\nvar tagNameRegex = new RegExp('[^a-z0-9-_:]');\nvar IGNORED_NODE = -2;\n\nfunction genId() {\n  return _id++;\n}\n\nfunction getValidTagName(element) {\n  if (element instanceof HTMLFormElement) {\n    return 'form';\n  }\n\n  var processedTagName = element.tagName.toLowerCase().trim();\n\n  if (tagNameRegex.test(processedTagName)) {\n    return 'div';\n  }\n\n  return processedTagName;\n}\n\nfunction getCssRulesString(s) {\n  try {\n    var rules = s.rules || s.cssRules;\n    return rules ? Array.from(rules).map(getCssRuleString).join('') : null;\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction getCssRuleString(rule) {\n  var cssStringified = rule.cssText;\n\n  if (isCSSImportRule(rule)) {\n    try {\n      cssStringified = getCssRulesString(rule.styleSheet) || cssStringified;\n    } catch (_a) {}\n  }\n\n  return cssStringified;\n}\n\nfunction isCSSImportRule(rule) {\n  return 'styleSheet' in rule;\n}\n\nfunction stringifyStyleSheet(sheet) {\n  return sheet.cssRules ? Array.from(sheet.cssRules).map(function (rule) {\n    return rule.cssText || '';\n  }).join('') : '';\n}\n\nfunction extractOrigin(url) {\n  var origin = '';\n\n  if (url.indexOf('//') > -1) {\n    origin = url.split('/').slice(0, 3).join('/');\n  } else {\n    origin = url.split('/')[0];\n  }\n\n  origin = origin.split('?')[0];\n  return origin;\n}\n\nvar canvasService;\nvar canvasCtx;\nvar URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\nvar RELATIVE_PATH = /^(?!www\\.|(?:http|ftp)s?:\\/\\/|[A-Za-z]:\\\\|\\/\\/|#).*/;\nvar DATA_URI = /^(data:)([^,]*),(.*)/i;\n\nfunction absoluteToStylesheet(cssText, href) {\n  return (cssText || '').replace(URL_IN_CSS_REF, function (origin, quote1, path1, quote2, path2, path3) {\n    var filePath = path1 || path2 || path3;\n    var maybeQuote = quote1 || quote2 || '';\n\n    if (!filePath) {\n      return origin;\n    }\n\n    if (!RELATIVE_PATH.test(filePath)) {\n      return \"url(\" + maybeQuote + filePath + maybeQuote + \")\";\n    }\n\n    if (DATA_URI.test(filePath)) {\n      return \"url(\" + maybeQuote + filePath + maybeQuote + \")\";\n    }\n\n    if (filePath[0] === '/') {\n      return \"url(\" + maybeQuote + (extractOrigin(href) + filePath) + maybeQuote + \")\";\n    }\n\n    var stack = href.split('/');\n    var parts = filePath.split('/');\n    stack.pop();\n\n    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n      var part = parts_1[_i];\n\n      if (part === '.') {\n        continue;\n      } else if (part === '..') {\n        stack.pop();\n      } else {\n        stack.push(part);\n      }\n    }\n\n    return \"url(\" + maybeQuote + stack.join('/') + maybeQuote + \")\";\n  });\n}\n\nvar SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\nvar SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\n\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\n  if (attributeValue.trim() === '') {\n    return attributeValue;\n  }\n\n  var pos = 0;\n\n  function collectCharacters(regEx) {\n    var chars;\n    var match = regEx.exec(attributeValue.substring(pos));\n\n    if (match) {\n      chars = match[0];\n      pos += chars.length;\n      return chars;\n    }\n\n    return '';\n  }\n\n  var output = [];\n\n  while (true) {\n    collectCharacters(SRCSET_COMMAS_OR_SPACES);\n\n    if (pos >= attributeValue.length) {\n      break;\n    }\n\n    var url = collectCharacters(SRCSET_NOT_SPACES);\n\n    if (url.slice(-1) === ',') {\n      url = absoluteToDoc(doc, url.substring(0, url.length - 1));\n      output.push(url);\n    } else {\n      var descriptorsStr = '';\n      url = absoluteToDoc(doc, url);\n      var inParens = false;\n\n      while (true) {\n        var c = attributeValue.charAt(pos);\n\n        if (c === '') {\n          output.push((url + descriptorsStr).trim());\n          break;\n        } else if (!inParens) {\n          if (c === ',') {\n            pos += 1;\n            output.push((url + descriptorsStr).trim());\n            break;\n          } else if (c === '(') {\n            inParens = true;\n          }\n        } else {\n          if (c === ')') {\n            inParens = false;\n          }\n        }\n\n        descriptorsStr += c;\n        pos += 1;\n      }\n    }\n  }\n\n  return output.join(', ');\n}\n\nfunction absoluteToDoc(doc, attributeValue) {\n  if (!attributeValue || attributeValue.trim() === '') {\n    return attributeValue;\n  }\n\n  var a = doc.createElement('a');\n  a.href = attributeValue;\n  return a.href;\n}\n\nfunction isSVGElement(el) {\n  return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\n}\n\nfunction getHref() {\n  var a = document.createElement('a');\n  a.href = '';\n  return a.href;\n}\n\nfunction transformAttribute(doc, tagName, name, value) {\n  if (name === 'src' || name === 'href' && value) {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'xlink:href' && value && value[0] !== '#') {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'background' && value && (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'srcset' && value) {\n    return getAbsoluteSrcsetString(doc, value);\n  } else if (name === 'style' && value) {\n    return absoluteToStylesheet(value, getHref());\n  } else if (tagName === 'object' && name === 'data' && value) {\n    return absoluteToDoc(doc, value);\n  } else {\n    return value;\n  }\n}\n\nfunction _isBlockedElement(element, blockClass, blockSelector) {\n  if (typeof blockClass === 'string') {\n    if (element.classList.contains(blockClass)) {\n      return true;\n    }\n  } else {\n    for (var eIndex = 0; eIndex < element.classList.length; eIndex++) {\n      var className = element.classList[eIndex];\n\n      if (blockClass.test(className)) {\n        return true;\n      }\n    }\n  }\n\n  if (blockSelector) {\n    return element.matches(blockSelector);\n  }\n\n  return false;\n}\n\nfunction needMaskingText(node, maskTextClass, maskTextSelector) {\n  if (!node) {\n    return false;\n  }\n\n  if (node.nodeType === node.ELEMENT_NODE) {\n    if (typeof maskTextClass === 'string') {\n      if (node.classList.contains(maskTextClass)) {\n        return true;\n      }\n    } else {\n      for (var eIndex = 0; eIndex < node.classList.length; eIndex++) {\n        var className = node.classList[eIndex];\n\n        if (maskTextClass.test(className)) {\n          return true;\n        }\n      }\n    }\n\n    if (maskTextSelector) {\n      if (node.matches(maskTextSelector)) {\n        return true;\n      }\n    }\n\n    return needMaskingText(node.parentNode, maskTextClass, maskTextSelector);\n  }\n\n  if (node.nodeType === node.TEXT_NODE) {\n    return needMaskingText(node.parentNode, maskTextClass, maskTextSelector);\n  }\n\n  return needMaskingText(node.parentNode, maskTextClass, maskTextSelector);\n}\n\nfunction onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\n  var win = iframeEl.contentWindow;\n\n  if (!win) {\n    return;\n  }\n\n  var fired = false;\n  var readyState;\n\n  try {\n    readyState = win.document.readyState;\n  } catch (error) {\n    return;\n  }\n\n  if (readyState !== 'complete') {\n    var timer_1 = setTimeout(function () {\n      if (!fired) {\n        listener();\n        fired = true;\n      }\n    }, iframeLoadTimeout);\n    iframeEl.addEventListener('load', function () {\n      clearTimeout(timer_1);\n      fired = true;\n      listener();\n    });\n    return;\n  }\n\n  var blankUrl = 'about:blank';\n\n  if (win.location.href !== blankUrl || iframeEl.src === blankUrl || iframeEl.src === '') {\n    setTimeout(listener, 0);\n    return;\n  }\n\n  iframeEl.addEventListener('load', listener);\n}\n\nfunction serializeNode(n, options) {\n  var _a;\n\n  var doc = options.doc,\n      blockClass = options.blockClass,\n      blockSelector = options.blockSelector,\n      maskTextClass = options.maskTextClass,\n      maskTextSelector = options.maskTextSelector,\n      inlineStylesheet = options.inlineStylesheet,\n      _b = options.maskInputOptions,\n      maskInputOptions = _b === void 0 ? {} : _b,\n      maskTextFn = options.maskTextFn,\n      maskInputFn = options.maskInputFn,\n      _c = options.dataURLOptions,\n      dataURLOptions = _c === void 0 ? {} : _c,\n      inlineImages = options.inlineImages,\n      recordCanvas = options.recordCanvas,\n      keepIframeSrcFn = options.keepIframeSrcFn;\n  var rootId;\n\n  if (doc.__sn) {\n    var docId = doc.__sn.id;\n    rootId = docId === 1 ? undefined : docId;\n  }\n\n  switch (n.nodeType) {\n    case n.DOCUMENT_NODE:\n      if (n.compatMode !== 'CSS1Compat') {\n        return {\n          type: NodeType.Document,\n          childNodes: [],\n          compatMode: n.compatMode,\n          rootId: rootId\n        };\n      } else {\n        return {\n          type: NodeType.Document,\n          childNodes: [],\n          rootId: rootId\n        };\n      }\n\n    case n.DOCUMENT_TYPE_NODE:\n      return {\n        type: NodeType.DocumentType,\n        name: n.name,\n        publicId: n.publicId,\n        systemId: n.systemId,\n        rootId: rootId\n      };\n\n    case n.ELEMENT_NODE:\n      var needBlock = _isBlockedElement(n, blockClass, blockSelector);\n\n      var tagName = getValidTagName(n);\n      var attributes_1 = {};\n\n      for (var _i = 0, _d = Array.from(n.attributes); _i < _d.length; _i++) {\n        var _e = _d[_i],\n            name_1 = _e.name,\n            value = _e.value;\n        attributes_1[name_1] = transformAttribute(doc, tagName, name_1, value);\n      }\n\n      if (tagName === 'link' && inlineStylesheet) {\n        var stylesheet = Array.from(doc.styleSheets).find(function (s) {\n          return s.href === n.href;\n        });\n        var cssText = null;\n\n        if (stylesheet) {\n          cssText = getCssRulesString(stylesheet);\n        }\n\n        if (cssText) {\n          delete attributes_1.rel;\n          delete attributes_1.href;\n          attributes_1._cssText = absoluteToStylesheet(cssText, stylesheet.href);\n        }\n      }\n\n      if (tagName === 'style' && n.sheet && !(n.innerText || n.textContent || '').trim().length) {\n        var cssText = getCssRulesString(n.sheet);\n\n        if (cssText) {\n          attributes_1._cssText = absoluteToStylesheet(cssText, getHref());\n        }\n      }\n\n      if (tagName === 'input' || tagName === 'textarea' || tagName === 'select') {\n        var value = n.value;\n\n        if (attributes_1.type !== 'radio' && attributes_1.type !== 'checkbox' && attributes_1.type !== 'submit' && attributes_1.type !== 'button' && value) {\n          attributes_1.value = maskInputValue({\n            type: attributes_1.type,\n            tagName: tagName,\n            value: value,\n            maskInputOptions: maskInputOptions,\n            maskInputFn: maskInputFn\n          });\n        } else if (n.checked) {\n          attributes_1.checked = n.checked;\n        }\n      }\n\n      if (tagName === 'option') {\n        if (n.selected && !maskInputOptions['select']) {\n          attributes_1.selected = true;\n        } else {\n          delete attributes_1.selected;\n        }\n      }\n\n      if (tagName === 'canvas' && recordCanvas) {\n        if (n.__context === '2d') {\n          if (!is2DCanvasBlank(n)) {\n            attributes_1.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n          }\n        } else if (!('__context' in n)) {\n          var canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n          var blankCanvas = document.createElement('canvas');\n          blankCanvas.width = n.width;\n          blankCanvas.height = n.height;\n          var blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n\n          if (canvasDataURL !== blankCanvasDataURL) {\n            attributes_1.rr_dataURL = canvasDataURL;\n          }\n        }\n      }\n\n      if (tagName === 'img' && inlineImages) {\n        if (!canvasService) {\n          canvasService = doc.createElement('canvas');\n          canvasCtx = canvasService.getContext('2d');\n        }\n\n        var image_1 = n;\n        var oldValue_1 = image_1.crossOrigin;\n        image_1.crossOrigin = 'anonymous';\n\n        var recordInlineImage = function recordInlineImage() {\n          try {\n            canvasService.width = image_1.naturalWidth;\n            canvasService.height = image_1.naturalHeight;\n            canvasCtx.drawImage(image_1, 0, 0);\n            attributes_1.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n          } catch (err) {\n            console.warn(\"Cannot inline img src=\" + image_1.currentSrc + \"! Error: \" + err);\n          }\n\n          oldValue_1 ? attributes_1.crossOrigin = oldValue_1 : delete attributes_1.crossOrigin;\n        };\n\n        if (image_1.complete && image_1.naturalWidth !== 0) recordInlineImage();else image_1.onload = recordInlineImage;\n      }\n\n      if (tagName === 'audio' || tagName === 'video') {\n        attributes_1.rr_mediaState = n.paused ? 'paused' : 'played';\n        attributes_1.rr_mediaCurrentTime = n.currentTime;\n      }\n\n      if (n.scrollLeft) {\n        attributes_1.rr_scrollLeft = n.scrollLeft;\n      }\n\n      if (n.scrollTop) {\n        attributes_1.rr_scrollTop = n.scrollTop;\n      }\n\n      if (needBlock) {\n        var _f = n.getBoundingClientRect(),\n            width = _f.width,\n            height = _f.height;\n\n        attributes_1 = {\n          \"class\": attributes_1[\"class\"],\n          rr_width: width + \"px\",\n          rr_height: height + \"px\"\n        };\n      }\n\n      if (tagName === 'iframe' && !keepIframeSrcFn(attributes_1.src)) {\n        if (!n.contentDocument) {\n          attributes_1.rr_src = attributes_1.src;\n        }\n\n        delete attributes_1.src;\n      }\n\n      return {\n        type: NodeType.Element,\n        tagName: tagName,\n        attributes: attributes_1,\n        childNodes: [],\n        isSVG: isSVGElement(n) || undefined,\n        needBlock: needBlock,\n        rootId: rootId\n      };\n\n    case n.TEXT_NODE:\n      var parentTagName = n.parentNode && n.parentNode.tagName;\n      var textContent = n.textContent;\n      var isStyle = parentTagName === 'STYLE' ? true : undefined;\n      var isScript = parentTagName === 'SCRIPT' ? true : undefined;\n\n      if (isStyle && textContent) {\n        try {\n          if (n.nextSibling || n.previousSibling) {} else if ((_a = n.parentNode.sheet) === null || _a === void 0 ? void 0 : _a.cssRules) {\n            textContent = stringifyStyleSheet(n.parentNode.sheet);\n          }\n        } catch (err) {\n          console.warn(\"Cannot get CSS styles from text's parentNode. Error: \" + err, n);\n        }\n\n        textContent = absoluteToStylesheet(textContent, getHref());\n      }\n\n      if (isScript) {\n        textContent = 'SCRIPT_PLACEHOLDER';\n      }\n\n      if (!isStyle && !isScript && needMaskingText(n, maskTextClass, maskTextSelector) && textContent) {\n        textContent = maskTextFn ? maskTextFn(textContent) : textContent.replace(/[\\S]/g, '*');\n      }\n\n      return {\n        type: NodeType.Text,\n        textContent: textContent || '',\n        isStyle: isStyle,\n        rootId: rootId\n      };\n\n    case n.CDATA_SECTION_NODE:\n      return {\n        type: NodeType.CDATA,\n        textContent: '',\n        rootId: rootId\n      };\n\n    case n.COMMENT_NODE:\n      return {\n        type: NodeType.Comment,\n        textContent: n.textContent || '',\n        rootId: rootId\n      };\n\n    default:\n      return false;\n  }\n}\n\nfunction lowerIfExists(maybeAttr) {\n  if (maybeAttr === undefined) {\n    return '';\n  } else {\n    return maybeAttr.toLowerCase();\n  }\n}\n\nfunction slimDOMExcluded(sn, slimDOMOptions) {\n  if (slimDOMOptions.comment && sn.type === NodeType.Comment) {\n    return true;\n  } else if (sn.type === NodeType.Element) {\n    if (slimDOMOptions.script && (sn.tagName === 'script' || sn.tagName === 'link' && sn.attributes.rel === 'preload' && sn.attributes.as === 'script' || sn.tagName === 'link' && sn.attributes.rel === 'prefetch' && typeof sn.attributes.href === 'string' && sn.attributes.href.endsWith('.js'))) {\n      return true;\n    } else if (slimDOMOptions.headFavicon && (sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon' || sn.tagName === 'meta' && (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) || lowerIfExists(sn.attributes.name) === 'application-name' || lowerIfExists(sn.attributes.rel) === 'icon' || lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' || lowerIfExists(sn.attributes.rel) === 'shortcut icon'))) {\n      return true;\n    } else if (sn.tagName === 'meta') {\n      if (slimDOMOptions.headMetaDescKeywords && lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\n        return true;\n      } else if (slimDOMOptions.headMetaSocial && (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) || lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) || lowerIfExists(sn.attributes.name) === 'pinterest')) {\n        return true;\n      } else if (slimDOMOptions.headMetaRobots && (lowerIfExists(sn.attributes.name) === 'robots' || lowerIfExists(sn.attributes.name) === 'googlebot' || lowerIfExists(sn.attributes.name) === 'bingbot')) {\n        return true;\n      } else if (slimDOMOptions.headMetaHttpEquiv && sn.attributes['http-equiv'] !== undefined) {\n        return true;\n      } else if (slimDOMOptions.headMetaAuthorship && (lowerIfExists(sn.attributes.name) === 'author' || lowerIfExists(sn.attributes.name) === 'generator' || lowerIfExists(sn.attributes.name) === 'framework' || lowerIfExists(sn.attributes.name) === 'publisher' || lowerIfExists(sn.attributes.name) === 'progid' || lowerIfExists(sn.attributes.property).match(/^article:/) || lowerIfExists(sn.attributes.property).match(/^product:/))) {\n        return true;\n      } else if (slimDOMOptions.headMetaVerification && (lowerIfExists(sn.attributes.name) === 'google-site-verification' || lowerIfExists(sn.attributes.name) === 'yandex-verification' || lowerIfExists(sn.attributes.name) === 'csrf-token' || lowerIfExists(sn.attributes.name) === 'p:domain_verify' || lowerIfExists(sn.attributes.name) === 'verify-v1' || lowerIfExists(sn.attributes.name) === 'verification' || lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction serializeNodeWithId(n, options) {\n  var doc = options.doc,\n      map = options.map,\n      blockClass = options.blockClass,\n      blockSelector = options.blockSelector,\n      maskTextClass = options.maskTextClass,\n      maskTextSelector = options.maskTextSelector,\n      _a = options.skipChild,\n      skipChild = _a === void 0 ? false : _a,\n      _b = options.inlineStylesheet,\n      inlineStylesheet = _b === void 0 ? true : _b,\n      _c = options.maskInputOptions,\n      maskInputOptions = _c === void 0 ? {} : _c,\n      maskTextFn = options.maskTextFn,\n      maskInputFn = options.maskInputFn,\n      slimDOMOptions = options.slimDOMOptions,\n      _d = options.dataURLOptions,\n      dataURLOptions = _d === void 0 ? {} : _d,\n      _e = options.inlineImages,\n      inlineImages = _e === void 0 ? false : _e,\n      _f = options.recordCanvas,\n      recordCanvas = _f === void 0 ? false : _f,\n      onSerialize = options.onSerialize,\n      onIframeLoad = options.onIframeLoad,\n      _g = options.iframeLoadTimeout,\n      iframeLoadTimeout = _g === void 0 ? 5000 : _g,\n      _h = options.keepIframeSrcFn,\n      keepIframeSrcFn = _h === void 0 ? function () {\n    return false;\n  } : _h;\n  var _j = options.preserveWhiteSpace,\n      preserveWhiteSpace = _j === void 0 ? true : _j;\n\n  var _serializedNode = serializeNode(n, {\n    doc: doc,\n    blockClass: blockClass,\n    blockSelector: blockSelector,\n    maskTextClass: maskTextClass,\n    maskTextSelector: maskTextSelector,\n    inlineStylesheet: inlineStylesheet,\n    maskInputOptions: maskInputOptions,\n    maskTextFn: maskTextFn,\n    maskInputFn: maskInputFn,\n    dataURLOptions: dataURLOptions,\n    inlineImages: inlineImages,\n    recordCanvas: recordCanvas,\n    keepIframeSrcFn: keepIframeSrcFn\n  });\n\n  if (!_serializedNode) {\n    console.warn(n, 'not serialized');\n    return null;\n  }\n\n  var id;\n\n  if ('__sn' in n) {\n    id = n.__sn.id;\n  } else if (slimDOMExcluded(_serializedNode, slimDOMOptions) || !preserveWhiteSpace && _serializedNode.type === NodeType.Text && !_serializedNode.isStyle && !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length) {\n    id = IGNORED_NODE;\n  } else {\n    id = genId();\n  }\n\n  var serializedNode = Object.assign(_serializedNode, {\n    id: id\n  });\n  n.__sn = serializedNode;\n\n  if (id === IGNORED_NODE) {\n    return null;\n  }\n\n  map[id] = n;\n\n  if (onSerialize) {\n    onSerialize(n);\n  }\n\n  var recordChild = !skipChild;\n\n  if (serializedNode.type === NodeType.Element) {\n    recordChild = recordChild && !serializedNode.needBlock;\n    delete serializedNode.needBlock;\n    if (n.shadowRoot) serializedNode.isShadowHost = true;\n  }\n\n  if ((serializedNode.type === NodeType.Document || serializedNode.type === NodeType.Element) && recordChild) {\n    if (slimDOMOptions.headWhitespace && _serializedNode.type === NodeType.Element && _serializedNode.tagName === 'head') {\n      preserveWhiteSpace = false;\n    }\n\n    var bypassOptions = {\n      doc: doc,\n      map: map,\n      blockClass: blockClass,\n      blockSelector: blockSelector,\n      maskTextClass: maskTextClass,\n      maskTextSelector: maskTextSelector,\n      skipChild: skipChild,\n      inlineStylesheet: inlineStylesheet,\n      maskInputOptions: maskInputOptions,\n      maskTextFn: maskTextFn,\n      maskInputFn: maskInputFn,\n      slimDOMOptions: slimDOMOptions,\n      dataURLOptions: dataURLOptions,\n      inlineImages: inlineImages,\n      recordCanvas: recordCanvas,\n      preserveWhiteSpace: preserveWhiteSpace,\n      onSerialize: onSerialize,\n      onIframeLoad: onIframeLoad,\n      iframeLoadTimeout: iframeLoadTimeout,\n      keepIframeSrcFn: keepIframeSrcFn\n    };\n\n    for (var _i = 0, _k = Array.from(n.childNodes); _i < _k.length; _i++) {\n      var childN = _k[_i];\n      var serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n\n      if (serializedChildNode) {\n        serializedNode.childNodes.push(serializedChildNode);\n      }\n    }\n\n    if (isElement(n) && n.shadowRoot) {\n      for (var _l = 0, _m = Array.from(n.shadowRoot.childNodes); _l < _m.length; _l++) {\n        var childN = _m[_l];\n        var serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n\n        if (serializedChildNode) {\n          serializedChildNode.isShadow = true;\n          serializedNode.childNodes.push(serializedChildNode);\n        }\n      }\n    }\n  }\n\n  if (n.parentNode && isShadowRoot(n.parentNode)) {\n    serializedNode.isShadow = true;\n  }\n\n  if (serializedNode.type === NodeType.Element && serializedNode.tagName === 'iframe') {\n    onceIframeLoaded(n, function () {\n      var iframeDoc = n.contentDocument;\n\n      if (iframeDoc && onIframeLoad) {\n        var serializedIframeNode = serializeNodeWithId(iframeDoc, {\n          doc: iframeDoc,\n          map: map,\n          blockClass: blockClass,\n          blockSelector: blockSelector,\n          maskTextClass: maskTextClass,\n          maskTextSelector: maskTextSelector,\n          skipChild: false,\n          inlineStylesheet: inlineStylesheet,\n          maskInputOptions: maskInputOptions,\n          maskTextFn: maskTextFn,\n          maskInputFn: maskInputFn,\n          slimDOMOptions: slimDOMOptions,\n          dataURLOptions: dataURLOptions,\n          inlineImages: inlineImages,\n          recordCanvas: recordCanvas,\n          preserveWhiteSpace: preserveWhiteSpace,\n          onSerialize: onSerialize,\n          onIframeLoad: onIframeLoad,\n          iframeLoadTimeout: iframeLoadTimeout,\n          keepIframeSrcFn: keepIframeSrcFn\n        });\n\n        if (serializedIframeNode) {\n          onIframeLoad(n, serializedIframeNode);\n        }\n      }\n    }, iframeLoadTimeout);\n  }\n\n  return serializedNode;\n}\n\nfunction snapshot(n, options) {\n  var _a = options || {},\n      _b = _a.blockClass,\n      blockClass = _b === void 0 ? 'rr-block' : _b,\n      _c = _a.blockSelector,\n      blockSelector = _c === void 0 ? null : _c,\n      _d = _a.maskTextClass,\n      maskTextClass = _d === void 0 ? 'rr-mask' : _d,\n      _e = _a.maskTextSelector,\n      maskTextSelector = _e === void 0 ? null : _e,\n      _f = _a.inlineStylesheet,\n      inlineStylesheet = _f === void 0 ? true : _f,\n      _g = _a.inlineImages,\n      inlineImages = _g === void 0 ? false : _g,\n      _h = _a.recordCanvas,\n      recordCanvas = _h === void 0 ? false : _h,\n      _j = _a.maskAllInputs,\n      maskAllInputs = _j === void 0 ? false : _j,\n      maskTextFn = _a.maskTextFn,\n      maskInputFn = _a.maskInputFn,\n      _k = _a.slimDOM,\n      slimDOM = _k === void 0 ? false : _k,\n      dataURLOptions = _a.dataURLOptions,\n      preserveWhiteSpace = _a.preserveWhiteSpace,\n      onSerialize = _a.onSerialize,\n      onIframeLoad = _a.onIframeLoad,\n      iframeLoadTimeout = _a.iframeLoadTimeout,\n      _l = _a.keepIframeSrcFn,\n      keepIframeSrcFn = _l === void 0 ? function () {\n    return false;\n  } : _l;\n\n  var idNodeMap = {};\n  var maskInputOptions = maskAllInputs === true ? {\n    color: true,\n    date: true,\n    'datetime-local': true,\n    email: true,\n    month: true,\n    number: true,\n    range: true,\n    search: true,\n    tel: true,\n    text: true,\n    time: true,\n    url: true,\n    week: true,\n    textarea: true,\n    select: true,\n    password: true\n  } : maskAllInputs === false ? {\n    password: true\n  } : maskAllInputs;\n  var slimDOMOptions = slimDOM === true || slimDOM === 'all' ? {\n    script: true,\n    comment: true,\n    headFavicon: true,\n    headWhitespace: true,\n    headMetaDescKeywords: slimDOM === 'all',\n    headMetaSocial: true,\n    headMetaRobots: true,\n    headMetaHttpEquiv: true,\n    headMetaAuthorship: true,\n    headMetaVerification: true\n  } : slimDOM === false ? {} : slimDOM;\n  return [serializeNodeWithId(n, {\n    doc: n,\n    map: idNodeMap,\n    blockClass: blockClass,\n    blockSelector: blockSelector,\n    maskTextClass: maskTextClass,\n    maskTextSelector: maskTextSelector,\n    skipChild: false,\n    inlineStylesheet: inlineStylesheet,\n    maskInputOptions: maskInputOptions,\n    maskTextFn: maskTextFn,\n    maskInputFn: maskInputFn,\n    slimDOMOptions: slimDOMOptions,\n    dataURLOptions: dataURLOptions,\n    inlineImages: inlineImages,\n    recordCanvas: recordCanvas,\n    preserveWhiteSpace: preserveWhiteSpace,\n    onSerialize: onSerialize,\n    onIframeLoad: onIframeLoad,\n    iframeLoadTimeout: iframeLoadTimeout,\n    keepIframeSrcFn: keepIframeSrcFn\n  }), idNodeMap];\n}\n\nvar commentre = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nfunction parse(css, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var lineno = 1;\n  var column = 1;\n\n  function updatePosition(str) {\n    var lines = str.match(/\\n/g);\n\n    if (lines) {\n      lineno += lines.length;\n    }\n\n    var i = str.lastIndexOf('\\n');\n    column = i === -1 ? column + str.length : str.length - i;\n  }\n\n  function position() {\n    var start = {\n      line: lineno,\n      column: column\n    };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  var Position = function () {\n    function Position(start) {\n      this.start = start;\n      this.end = {\n        line: lineno,\n        column: column\n      };\n      this.source = options.source;\n    }\n\n    return Position;\n  }();\n\n  Position.prototype.content = css;\n  var errorsList = [];\n\n  function error(msg) {\n    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = css;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  function stylesheet() {\n    var rulesList = rules();\n    return {\n      type: 'stylesheet',\n      stylesheet: {\n        source: options.source,\n        rules: rulesList,\n        parsingErrors: errorsList\n      }\n    };\n  }\n\n  function open() {\n    return match(/^{\\s*/);\n  }\n\n  function close() {\n    return match(/^}/);\n  }\n\n  function rules() {\n    var node;\n    var rules = [];\n    whitespace();\n    comments(rules);\n\n    while (css.length && css.charAt(0) !== '}' && (node = atrule() || rule())) {\n      if (node !== false) {\n        rules.push(node);\n        comments(rules);\n      }\n    }\n\n    return rules;\n  }\n\n  function match(re) {\n    var m = re.exec(css);\n\n    if (!m) {\n      return;\n    }\n\n    var str = m[0];\n    updatePosition(str);\n    css = css.slice(str.length);\n    return m;\n  }\n\n  function whitespace() {\n    match(/^\\s*/);\n  }\n\n  function comments(rules) {\n    if (rules === void 0) {\n      rules = [];\n    }\n\n    var c;\n\n    while (c = comment()) {\n      if (c !== false) {\n        rules.push(c);\n      }\n\n      c = comment();\n    }\n\n    return rules;\n  }\n\n  function comment() {\n    var pos = position();\n\n    if ('/' !== css.charAt(0) || '*' !== css.charAt(1)) {\n      return;\n    }\n\n    var i = 2;\n\n    while ('' !== css.charAt(i) && ('*' !== css.charAt(i) || '/' !== css.charAt(i + 1))) {\n      ++i;\n    }\n\n    i += 2;\n\n    if ('' === css.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = css.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    css = css.slice(i);\n    column += 2;\n    return pos({\n      type: 'comment',\n      comment: str\n    });\n  }\n\n  function selector() {\n    var m = match(/^([^{]+)/);\n\n    if (!m) {\n      return;\n    }\n\n    return trim(m[0]).replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '').replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function (m) {\n      return m.replace(/,/g, \"\\u200C\");\n    }).split(/\\s*(?![^(]*\\)),\\s*/).map(function (s) {\n      return s.replace(/\\u200C/g, ',');\n    });\n  }\n\n  function declaration() {\n    var pos = position();\n    var propMatch = match(/^(\\*?[-#\\/\\*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n\n    if (!propMatch) {\n      return;\n    }\n\n    var prop = trim(propMatch[0]);\n\n    if (!match(/^:\\s*/)) {\n      return error(\"property missing ':'\");\n    }\n\n    var val = match(/^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+)/);\n    var ret = pos({\n      type: 'declaration',\n      property: prop.replace(commentre, ''),\n      value: val ? trim(val[0]).replace(commentre, '') : ''\n    });\n    match(/^[;\\s]*/);\n    return ret;\n  }\n\n  function declarations() {\n    var decls = [];\n\n    if (!open()) {\n      return error(\"missing '{'\");\n    }\n\n    comments(decls);\n    var decl;\n\n    while (decl = declaration()) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n\n      decl = declaration();\n    }\n\n    if (!close()) {\n      return error(\"missing '}'\");\n    }\n\n    return decls;\n  }\n\n  function keyframe() {\n    var m;\n    var vals = [];\n    var pos = position();\n\n    while (m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/)) {\n      vals.push(m[1]);\n      match(/^,\\s*/);\n    }\n\n    if (!vals.length) {\n      return;\n    }\n\n    return pos({\n      type: 'keyframe',\n      values: vals,\n      declarations: declarations()\n    });\n  }\n\n  function atkeyframes() {\n    var pos = position();\n    var m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n    if (!m) {\n      return;\n    }\n\n    var vendor = m[1];\n    m = match(/^([-\\w]+)\\s*/);\n\n    if (!m) {\n      return error('@keyframes missing name');\n    }\n\n    var name = m[1];\n\n    if (!open()) {\n      return error(\"@keyframes missing '{'\");\n    }\n\n    var frame;\n    var frames = comments();\n\n    while (frame = keyframe()) {\n      frames.push(frame);\n      frames = frames.concat(comments());\n    }\n\n    if (!close()) {\n      return error(\"@keyframes missing '}'\");\n    }\n\n    return pos({\n      type: 'keyframes',\n      name: name,\n      vendor: vendor,\n      keyframes: frames\n    });\n  }\n\n  function atsupports() {\n    var pos = position();\n    var m = match(/^@supports *([^{]+)/);\n\n    if (!m) {\n      return;\n    }\n\n    var supports = trim(m[1]);\n\n    if (!open()) {\n      return error(\"@supports missing '{'\");\n    }\n\n    var style = comments().concat(rules());\n\n    if (!close()) {\n      return error(\"@supports missing '}'\");\n    }\n\n    return pos({\n      type: 'supports',\n      supports: supports,\n      rules: style\n    });\n  }\n\n  function athost() {\n    var pos = position();\n    var m = match(/^@host\\s*/);\n\n    if (!m) {\n      return;\n    }\n\n    if (!open()) {\n      return error(\"@host missing '{'\");\n    }\n\n    var style = comments().concat(rules());\n\n    if (!close()) {\n      return error(\"@host missing '}'\");\n    }\n\n    return pos({\n      type: 'host',\n      rules: style\n    });\n  }\n\n  function atmedia() {\n    var pos = position();\n    var m = match(/^@media *([^{]+)/);\n\n    if (!m) {\n      return;\n    }\n\n    var media = trim(m[1]);\n\n    if (!open()) {\n      return error(\"@media missing '{'\");\n    }\n\n    var style = comments().concat(rules());\n\n    if (!close()) {\n      return error(\"@media missing '}'\");\n    }\n\n    return pos({\n      type: 'media',\n      media: media,\n      rules: style\n    });\n  }\n\n  function atcustommedia() {\n    var pos = position();\n    var m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n\n    if (!m) {\n      return;\n    }\n\n    return pos({\n      type: 'custom-media',\n      name: trim(m[1]),\n      media: trim(m[2])\n    });\n  }\n\n  function atpage() {\n    var pos = position();\n    var m = match(/^@page */);\n\n    if (!m) {\n      return;\n    }\n\n    var sel = selector() || [];\n\n    if (!open()) {\n      return error(\"@page missing '{'\");\n    }\n\n    var decls = comments();\n    var decl;\n\n    while (decl = declaration()) {\n      decls.push(decl);\n      decls = decls.concat(comments());\n    }\n\n    if (!close()) {\n      return error(\"@page missing '}'\");\n    }\n\n    return pos({\n      type: 'page',\n      selectors: sel,\n      declarations: decls\n    });\n  }\n\n  function atdocument() {\n    var pos = position();\n    var m = match(/^@([-\\w]+)?document *([^{]+)/);\n\n    if (!m) {\n      return;\n    }\n\n    var vendor = trim(m[1]);\n    var doc = trim(m[2]);\n\n    if (!open()) {\n      return error(\"@document missing '{'\");\n    }\n\n    var style = comments().concat(rules());\n\n    if (!close()) {\n      return error(\"@document missing '}'\");\n    }\n\n    return pos({\n      type: 'document',\n      document: doc,\n      vendor: vendor,\n      rules: style\n    });\n  }\n\n  function atfontface() {\n    var pos = position();\n    var m = match(/^@font-face\\s*/);\n\n    if (!m) {\n      return;\n    }\n\n    if (!open()) {\n      return error(\"@font-face missing '{'\");\n    }\n\n    var decls = comments();\n    var decl;\n\n    while (decl = declaration()) {\n      decls.push(decl);\n      decls = decls.concat(comments());\n    }\n\n    if (!close()) {\n      return error(\"@font-face missing '}'\");\n    }\n\n    return pos({\n      type: 'font-face',\n      declarations: decls\n    });\n  }\n\n  var atimport = _compileAtrule('import');\n\n  var atcharset = _compileAtrule('charset');\n\n  var atnamespace = _compileAtrule('namespace');\n\n  function _compileAtrule(name) {\n    var re = new RegExp('^@' + name + '\\\\s*([^;]+);');\n    return function () {\n      var pos = position();\n      var m = match(re);\n\n      if (!m) {\n        return;\n      }\n\n      var ret = {\n        type: name\n      };\n      ret[name] = m[1].trim();\n      return pos(ret);\n    };\n  }\n\n  function atrule() {\n    if (css[0] !== '@') {\n      return;\n    }\n\n    return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface();\n  }\n\n  function rule() {\n    var pos = position();\n    var sel = selector();\n\n    if (!sel) {\n      return error('selector missing');\n    }\n\n    comments();\n    return pos({\n      type: 'rule',\n      selectors: sel,\n      declarations: declarations()\n    });\n  }\n\n  return addParent(stylesheet());\n}\n\nfunction trim(str) {\n  return str ? str.replace(/^\\s+|\\s+$/g, '') : '';\n}\n\nfunction addParent(obj, parent) {\n  var isNode = obj && typeof obj.type === 'string';\n  var childParent = isNode ? obj : parent;\n\n  for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {\n    var k = _a[_i];\n    var value = obj[k];\n\n    if (Array.isArray(value)) {\n      value.forEach(function (v) {\n        addParent(v, childParent);\n      });\n    } else if (value && typeof value === 'object') {\n      addParent(value, childParent);\n    }\n  }\n\n  if (isNode) {\n    Object.defineProperty(obj, 'parent', {\n      configurable: true,\n      writable: true,\n      enumerable: false,\n      value: parent || null\n    });\n  }\n\n  return obj;\n}\n\nvar tagMap = {\n  script: 'noscript',\n  altglyph: 'altGlyph',\n  altglyphdef: 'altGlyphDef',\n  altglyphitem: 'altGlyphItem',\n  animatecolor: 'animateColor',\n  animatemotion: 'animateMotion',\n  animatetransform: 'animateTransform',\n  clippath: 'clipPath',\n  feblend: 'feBlend',\n  fecolormatrix: 'feColorMatrix',\n  fecomponenttransfer: 'feComponentTransfer',\n  fecomposite: 'feComposite',\n  feconvolvematrix: 'feConvolveMatrix',\n  fediffuselighting: 'feDiffuseLighting',\n  fedisplacementmap: 'feDisplacementMap',\n  fedistantlight: 'feDistantLight',\n  fedropshadow: 'feDropShadow',\n  feflood: 'feFlood',\n  fefunca: 'feFuncA',\n  fefuncb: 'feFuncB',\n  fefuncg: 'feFuncG',\n  fefuncr: 'feFuncR',\n  fegaussianblur: 'feGaussianBlur',\n  feimage: 'feImage',\n  femerge: 'feMerge',\n  femergenode: 'feMergeNode',\n  femorphology: 'feMorphology',\n  feoffset: 'feOffset',\n  fepointlight: 'fePointLight',\n  fespecularlighting: 'feSpecularLighting',\n  fespotlight: 'feSpotLight',\n  fetile: 'feTile',\n  feturbulence: 'feTurbulence',\n  foreignobject: 'foreignObject',\n  glyphref: 'glyphRef',\n  lineargradient: 'linearGradient',\n  radialgradient: 'radialGradient'\n};\n\nfunction getTagName(n) {\n  var tagName = tagMap[n.tagName] ? tagMap[n.tagName] : n.tagName;\n\n  if (tagName === 'link' && n.attributes._cssText) {\n    tagName = 'style';\n  }\n\n  return tagName;\n}\n\nfunction escapeRegExp(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nvar HOVER_SELECTOR = /([^\\\\]):hover/;\nvar HOVER_SELECTOR_GLOBAL = new RegExp(HOVER_SELECTOR.source, 'g');\n\nfunction addHoverClass(cssText, cache) {\n  var cachedStyle = cache === null || cache === void 0 ? void 0 : cache.stylesWithHoverClass.get(cssText);\n  if (cachedStyle) return cachedStyle;\n  var ast = parse(cssText, {\n    silent: true\n  });\n\n  if (!ast.stylesheet) {\n    return cssText;\n  }\n\n  var selectors = [];\n  ast.stylesheet.rules.forEach(function (rule) {\n    if ('selectors' in rule) {\n      (rule.selectors || []).forEach(function (selector) {\n        if (HOVER_SELECTOR.test(selector)) {\n          selectors.push(selector);\n        }\n      });\n    }\n  });\n\n  if (selectors.length === 0) {\n    return cssText;\n  }\n\n  var selectorMatcher = new RegExp(selectors.filter(function (selector, index) {\n    return selectors.indexOf(selector) === index;\n  }).sort(function (a, b) {\n    return b.length - a.length;\n  }).map(function (selector) {\n    return escapeRegExp(selector);\n  }).join('|'), 'g');\n  var result = cssText.replace(selectorMatcher, function (selector) {\n    var newSelector = selector.replace(HOVER_SELECTOR_GLOBAL, '$1.\\\\:hover');\n    return selector + \", \" + newSelector;\n  });\n  cache === null || cache === void 0 ? void 0 : cache.stylesWithHoverClass.set(cssText, result);\n  return result;\n}\n\nfunction createCache() {\n  var stylesWithHoverClass = new Map();\n  return {\n    stylesWithHoverClass: stylesWithHoverClass\n  };\n}\n\nfunction buildNode(n, options) {\n  var doc = options.doc,\n      hackCss = options.hackCss,\n      cache = options.cache;\n\n  switch (n.type) {\n    case NodeType.Document:\n      return doc.implementation.createDocument(null, '', null);\n\n    case NodeType.DocumentType:\n      return doc.implementation.createDocumentType(n.name || 'html', n.publicId, n.systemId);\n\n    case NodeType.Element:\n      var tagName = getTagName(n);\n      var node_1;\n\n      if (n.isSVG) {\n        node_1 = doc.createElementNS('http://www.w3.org/2000/svg', tagName);\n      } else {\n        node_1 = doc.createElement(tagName);\n      }\n\n      var _loop_1 = function _loop_1(name_1) {\n        if (!n.attributes.hasOwnProperty(name_1)) {\n          return \"continue\";\n        }\n\n        var value = n.attributes[name_1];\n\n        if (tagName === 'option' && name_1 === 'selected' && value === false) {\n          return \"continue\";\n        }\n\n        value = typeof value === 'boolean' || typeof value === 'number' ? '' : value;\n\n        if (!name_1.startsWith('rr_')) {\n          var isTextarea = tagName === 'textarea' && name_1 === 'value';\n          var isRemoteOrDynamicCss = tagName === 'style' && name_1 === '_cssText';\n\n          if (isRemoteOrDynamicCss && hackCss) {\n            value = addHoverClass(value, cache);\n          }\n\n          if (isTextarea || isRemoteOrDynamicCss) {\n            var child = doc.createTextNode(value);\n\n            for (var _i = 0, _a = Array.from(node_1.childNodes); _i < _a.length; _i++) {\n              var c = _a[_i];\n\n              if (c.nodeType === node_1.TEXT_NODE) {\n                node_1.removeChild(c);\n              }\n            }\n\n            node_1.appendChild(child);\n            return \"continue\";\n          }\n\n          try {\n            if (n.isSVG && name_1 === 'xlink:href') {\n              node_1.setAttributeNS('http://www.w3.org/1999/xlink', name_1, value);\n            } else if (name_1 === 'onload' || name_1 === 'onclick' || name_1.substring(0, 7) === 'onmouse') {\n              node_1.setAttribute('_' + name_1, value);\n            } else if (tagName === 'meta' && n.attributes['http-equiv'] === 'Content-Security-Policy' && name_1 === 'content') {\n              node_1.setAttribute('csp-content', value);\n              return \"continue\";\n            } else if (tagName === 'link' && n.attributes.rel === 'preload' && n.attributes.as === 'script') {} else if (tagName === 'link' && n.attributes.rel === 'prefetch' && typeof n.attributes.href === 'string' && n.attributes.href.endsWith('.js')) {} else if (tagName === 'img' && n.attributes.srcset && n.attributes.rr_dataURL) {\n              node_1.setAttribute('rrweb-original-srcset', n.attributes.srcset);\n            } else {\n              node_1.setAttribute(name_1, value);\n            }\n          } catch (error) {}\n        } else {\n          if (tagName === 'canvas' && name_1 === 'rr_dataURL') {\n            var image_1 = document.createElement('img');\n            image_1.src = value;\n\n            image_1.onload = function () {\n              var ctx = node_1.getContext('2d');\n\n              if (ctx) {\n                ctx.drawImage(image_1, 0, 0, image_1.width, image_1.height);\n              }\n            };\n          } else if (tagName === 'img' && name_1 === 'rr_dataURL') {\n            var image = node_1;\n\n            if (!image.currentSrc.startsWith('data:')) {\n              image.setAttribute('rrweb-original-src', n.attributes.src);\n              image.src = value;\n            }\n          }\n\n          if (name_1 === 'rr_width') {\n            node_1.style.width = value;\n          } else if (name_1 === 'rr_height') {\n            node_1.style.height = value;\n          } else if (name_1 === 'rr_mediaCurrentTime') {\n            node_1.currentTime = n.attributes.rr_mediaCurrentTime;\n          } else if (name_1 === 'rr_mediaState') {\n            switch (value) {\n              case 'played':\n                node_1.play()[\"catch\"](function (e) {\n                  return console.warn('media playback error', e);\n                });\n                break;\n\n              case 'paused':\n                node_1.pause();\n                break;\n            }\n          }\n        }\n      };\n\n      for (var name_1 in n.attributes) {\n        _loop_1(name_1);\n      }\n\n      if (n.isShadowHost) {\n        if (!node_1.shadowRoot) {\n          node_1.attachShadow({\n            mode: 'open'\n          });\n        } else {\n          while (node_1.shadowRoot.firstChild) {\n            node_1.shadowRoot.removeChild(node_1.shadowRoot.firstChild);\n          }\n        }\n      }\n\n      return node_1;\n\n    case NodeType.Text:\n      return doc.createTextNode(n.isStyle && hackCss ? addHoverClass(n.textContent, cache) : n.textContent);\n\n    case NodeType.CDATA:\n      return doc.createCDATASection(n.textContent);\n\n    case NodeType.Comment:\n      return doc.createComment(n.textContent);\n\n    default:\n      return null;\n  }\n}\n\nfunction buildNodeWithSN(n, options) {\n  var doc = options.doc,\n      map = options.map,\n      _a = options.skipChild,\n      skipChild = _a === void 0 ? false : _a,\n      _b = options.hackCss,\n      hackCss = _b === void 0 ? true : _b,\n      afterAppend = options.afterAppend,\n      cache = options.cache;\n  var node = buildNode(n, {\n    doc: doc,\n    hackCss: hackCss,\n    cache: cache\n  });\n\n  if (!node) {\n    return null;\n  }\n\n  if (n.rootId) {\n    console.assert(map[n.rootId] === doc, 'Target document should has the same root id.');\n  }\n\n  if (n.type === NodeType.Document) {\n    doc.close();\n    doc.open();\n\n    if (n.compatMode === 'BackCompat' && n.childNodes && n.childNodes[0].type !== NodeType.DocumentType) {\n      if (n.childNodes[0].type === NodeType.Element && 'xmlns' in n.childNodes[0].attributes && n.childNodes[0].attributes.xmlns === 'http://www.w3.org/1999/xhtml') {\n        doc.write('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"\">');\n      } else {\n        doc.write('<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"\">');\n      }\n    }\n\n    node = doc;\n  }\n\n  node.__sn = n;\n  map[n.id] = node;\n\n  if ((n.type === NodeType.Document || n.type === NodeType.Element) && !skipChild) {\n    for (var _i = 0, _c = n.childNodes; _i < _c.length; _i++) {\n      var childN = _c[_i];\n      var childNode = buildNodeWithSN(childN, {\n        doc: doc,\n        map: map,\n        skipChild: false,\n        hackCss: hackCss,\n        afterAppend: afterAppend,\n        cache: cache\n      });\n\n      if (!childNode) {\n        console.warn('Failed to rebuild', childN);\n        continue;\n      }\n\n      if (childN.isShadow && isElement(node) && node.shadowRoot) {\n        node.shadowRoot.appendChild(childNode);\n      } else {\n        node.appendChild(childNode);\n      }\n\n      if (afterAppend) {\n        afterAppend(childNode);\n      }\n    }\n  }\n\n  return node;\n}\n\nfunction visit(idNodeMap, onVisit) {\n  function walk(node) {\n    onVisit(node);\n  }\n\n  for (var key in idNodeMap) {\n    if (idNodeMap[key]) {\n      walk(idNodeMap[key]);\n    }\n  }\n}\n\nfunction handleScroll(node) {\n  var n = node.__sn;\n\n  if (n.type !== NodeType.Element) {\n    return;\n  }\n\n  var el = node;\n\n  for (var name_2 in n.attributes) {\n    if (!(n.attributes.hasOwnProperty(name_2) && name_2.startsWith('rr_'))) {\n      continue;\n    }\n\n    var value = n.attributes[name_2];\n\n    if (name_2 === 'rr_scrollLeft') {\n      el.scrollLeft = value;\n    }\n\n    if (name_2 === 'rr_scrollTop') {\n      el.scrollTop = value;\n    }\n  }\n}\n\nfunction rebuild(n, options) {\n  var doc = options.doc,\n      onVisit = options.onVisit,\n      _a = options.hackCss,\n      hackCss = _a === void 0 ? true : _a,\n      afterAppend = options.afterAppend,\n      cache = options.cache;\n  var idNodeMap = {};\n  var node = buildNodeWithSN(n, {\n    doc: doc,\n    map: idNodeMap,\n    skipChild: false,\n    hackCss: hackCss,\n    afterAppend: afterAppend,\n    cache: cache\n  });\n  visit(idNodeMap, function (visitedNode) {\n    if (onVisit) {\n      onVisit(visitedNode);\n    }\n\n    handleScroll(visitedNode);\n  });\n  return [node, idNodeMap];\n}\n\nexport { IGNORED_NODE, NodeType, addHoverClass, buildNodeWithSN, createCache, is2DCanvasBlank, isElement, isShadowRoot, maskInputValue, needMaskingText, rebuild, serializeNodeWithId, snapshot, transformAttribute };","map":null,"metadata":{},"sourceType":"module"}