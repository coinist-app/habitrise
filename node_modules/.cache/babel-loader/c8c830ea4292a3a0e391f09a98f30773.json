{"ast":null,"code":"import { __assign, __read, __values } from '../../ext/tslib/tslib.es6.js';\nimport { snapshot } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport { initObservers, mutationBuffers } from './observer.js';\nimport { polyfill, on, createMirror, getWindowWidth, getWindowHeight, isIframeINode, hasShadowRoot } from '../utils.js';\nimport { EventType, IncrementalSource } from '../types.js';\nimport { IframeManager } from './iframe-manager.js';\nimport { ShadowDomManager } from './shadow-dom-manager.js';\nimport { CanvasManager } from './observers/canvas/canvas-manager.js';\n\nfunction wrapEvent(e) {\n  return __assign(__assign({}, e), {\n    timestamp: Date.now()\n  });\n}\n\nvar wrappedEmit;\nvar takeFullSnapshot;\nvar mirror = createMirror();\n\nfunction record(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var emit = options.emit,\n      checkoutEveryNms = options.checkoutEveryNms,\n      checkoutEveryNth = options.checkoutEveryNth,\n      _a = options.blockClass,\n      blockClass = _a === void 0 ? 'rr-block' : _a,\n      _b = options.blockSelector,\n      blockSelector = _b === void 0 ? null : _b,\n      _c = options.ignoreClass,\n      ignoreClass = _c === void 0 ? 'rr-ignore' : _c,\n      _d = options.maskTextClass,\n      maskTextClass = _d === void 0 ? 'rr-mask' : _d,\n      _e = options.maskTextSelector,\n      maskTextSelector = _e === void 0 ? null : _e,\n      _f = options.inlineStylesheet,\n      inlineStylesheet = _f === void 0 ? true : _f,\n      maskAllInputs = options.maskAllInputs,\n      _maskInputOptions = options.maskInputOptions,\n      _slimDOMOptions = options.slimDOMOptions,\n      maskInputFn = options.maskInputFn,\n      maskTextFn = options.maskTextFn,\n      hooks = options.hooks,\n      packFn = options.packFn,\n      _g = options.sampling,\n      sampling = _g === void 0 ? {} : _g,\n      mousemoveWait = options.mousemoveWait,\n      _h = options.recordCanvas,\n      recordCanvas = _h === void 0 ? false : _h,\n      _j = options.userTriggeredOnInput,\n      userTriggeredOnInput = _j === void 0 ? false : _j,\n      _k = options.collectFonts,\n      collectFonts = _k === void 0 ? false : _k,\n      _l = options.inlineImages,\n      inlineImages = _l === void 0 ? false : _l,\n      plugins = options.plugins,\n      _m = options.keepIframeSrcFn,\n      keepIframeSrcFn = _m === void 0 ? function () {\n    return false;\n  } : _m;\n\n  if (!emit) {\n    throw new Error('emit function is required');\n  }\n\n  if (mousemoveWait !== undefined && sampling.mousemove === undefined) {\n    sampling.mousemove = mousemoveWait;\n  }\n\n  var maskInputOptions = maskAllInputs === true ? {\n    color: true,\n    date: true,\n    'datetime-local': true,\n    email: true,\n    month: true,\n    number: true,\n    range: true,\n    search: true,\n    tel: true,\n    text: true,\n    time: true,\n    url: true,\n    week: true,\n    textarea: true,\n    select: true,\n    password: true\n  } : _maskInputOptions !== undefined ? _maskInputOptions : {\n    password: true\n  };\n  var slimDOMOptions = _slimDOMOptions === true || _slimDOMOptions === 'all' ? {\n    script: true,\n    comment: true,\n    headFavicon: true,\n    headWhitespace: true,\n    headMetaSocial: true,\n    headMetaRobots: true,\n    headMetaHttpEquiv: true,\n    headMetaVerification: true,\n    headMetaAuthorship: _slimDOMOptions === 'all',\n    headMetaDescKeywords: _slimDOMOptions === 'all'\n  } : _slimDOMOptions ? _slimDOMOptions : {};\n  polyfill();\n  var lastFullSnapshotEvent;\n  var incrementalSnapshotCount = 0;\n\n  var eventProcessor = function eventProcessor(e) {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(plugins || []), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var plugin = _c.value;\n\n        if (plugin.eventProcessor) {\n          e = plugin.eventProcessor(e);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    if (packFn) {\n      e = packFn(e);\n    }\n\n    return e;\n  };\n\n  wrappedEmit = function wrappedEmit(e, isCheckout) {\n    var _a;\n\n    if (((_a = mutationBuffers[0]) === null || _a === void 0 ? void 0 : _a.isFrozen()) && e.type !== EventType.FullSnapshot && !(e.type === EventType.IncrementalSnapshot && e.data.source === IncrementalSource.Mutation)) {\n      mutationBuffers.forEach(function (buf) {\n        return buf.unfreeze();\n      });\n    }\n\n    emit(eventProcessor(e), isCheckout);\n\n    if (e.type === EventType.FullSnapshot) {\n      lastFullSnapshotEvent = e;\n      incrementalSnapshotCount = 0;\n    } else if (e.type === EventType.IncrementalSnapshot) {\n      if (e.data.source === IncrementalSource.Mutation && e.data.isAttachIframe) {\n        return;\n      }\n\n      incrementalSnapshotCount++;\n      var exceedCount = checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;\n      var exceedTime = checkoutEveryNms && e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;\n\n      if (exceedCount || exceedTime) {\n        takeFullSnapshot(true);\n      }\n    }\n  };\n\n  var wrappedMutationEmit = function wrappedMutationEmit(m) {\n    wrappedEmit(wrapEvent({\n      type: EventType.IncrementalSnapshot,\n      data: __assign({\n        source: IncrementalSource.Mutation\n      }, m)\n    }));\n  };\n\n  var wrappedScrollEmit = function wrappedScrollEmit(p) {\n    return wrappedEmit(wrapEvent({\n      type: EventType.IncrementalSnapshot,\n      data: __assign({\n        source: IncrementalSource.Scroll\n      }, p)\n    }));\n  };\n\n  var wrappedCanvasMutationEmit = function wrappedCanvasMutationEmit(p) {\n    return wrappedEmit(wrapEvent({\n      type: EventType.IncrementalSnapshot,\n      data: __assign({\n        source: IncrementalSource.CanvasMutation\n      }, p)\n    }));\n  };\n\n  var iframeManager = new IframeManager({\n    mutationCb: wrappedMutationEmit\n  });\n  var canvasManager = new CanvasManager({\n    recordCanvas: recordCanvas,\n    mutationCb: wrappedCanvasMutationEmit,\n    win: window,\n    blockClass: blockClass,\n    mirror: mirror\n  });\n  var shadowDomManager = new ShadowDomManager({\n    mutationCb: wrappedMutationEmit,\n    scrollCb: wrappedScrollEmit,\n    bypassOptions: {\n      blockClass: blockClass,\n      blockSelector: blockSelector,\n      maskTextClass: maskTextClass,\n      maskTextSelector: maskTextSelector,\n      inlineStylesheet: inlineStylesheet,\n      maskInputOptions: maskInputOptions,\n      maskTextFn: maskTextFn,\n      maskInputFn: maskInputFn,\n      recordCanvas: recordCanvas,\n      inlineImages: inlineImages,\n      sampling: sampling,\n      slimDOMOptions: slimDOMOptions,\n      iframeManager: iframeManager,\n      canvasManager: canvasManager\n    },\n    mirror: mirror\n  });\n\n  takeFullSnapshot = function takeFullSnapshot(isCheckout) {\n    var _a, _b, _c, _d;\n\n    if (isCheckout === void 0) {\n      isCheckout = false;\n    }\n\n    wrappedEmit(wrapEvent({\n      type: EventType.Meta,\n      data: {\n        href: window.location.href,\n        width: getWindowWidth(),\n        height: getWindowHeight()\n      }\n    }), isCheckout);\n    mutationBuffers.forEach(function (buf) {\n      return buf.lock();\n    });\n\n    var _e = __read(snapshot(document, {\n      blockClass: blockClass,\n      blockSelector: blockSelector,\n      maskTextClass: maskTextClass,\n      maskTextSelector: maskTextSelector,\n      inlineStylesheet: inlineStylesheet,\n      maskAllInputs: maskInputOptions,\n      maskTextFn: maskTextFn,\n      slimDOM: slimDOMOptions,\n      recordCanvas: recordCanvas,\n      inlineImages: inlineImages,\n      onSerialize: function onSerialize(n) {\n        if (isIframeINode(n)) {\n          iframeManager.addIframe(n);\n        }\n\n        if (hasShadowRoot(n)) {\n          shadowDomManager.addShadowRoot(n.shadowRoot, document);\n        }\n      },\n      onIframeLoad: function onIframeLoad(iframe, childSn) {\n        iframeManager.attachIframe(iframe, childSn);\n        shadowDomManager.observeAttachShadow(iframe);\n      },\n      keepIframeSrcFn: keepIframeSrcFn\n    }), 2),\n        node = _e[0],\n        idNodeMap = _e[1];\n\n    if (!node) {\n      return console.warn('Failed to snapshot the document');\n    }\n\n    mirror.map = idNodeMap;\n    wrappedEmit(wrapEvent({\n      type: EventType.FullSnapshot,\n      data: {\n        node: node,\n        initialOffset: {\n          left: window.pageXOffset !== undefined ? window.pageXOffset : (document === null || document === void 0 ? void 0 : document.documentElement.scrollLeft) || ((_b = (_a = document === null || document === void 0 ? void 0 : document.body) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.scrollLeft) || (document === null || document === void 0 ? void 0 : document.body.scrollLeft) || 0,\n          top: window.pageYOffset !== undefined ? window.pageYOffset : (document === null || document === void 0 ? void 0 : document.documentElement.scrollTop) || ((_d = (_c = document === null || document === void 0 ? void 0 : document.body) === null || _c === void 0 ? void 0 : _c.parentElement) === null || _d === void 0 ? void 0 : _d.scrollTop) || (document === null || document === void 0 ? void 0 : document.body.scrollTop) || 0\n        }\n      }\n    }));\n    mutationBuffers.forEach(function (buf) {\n      return buf.unlock();\n    });\n  };\n\n  try {\n    var handlers_1 = [];\n    handlers_1.push(on('DOMContentLoaded', function () {\n      wrappedEmit(wrapEvent({\n        type: EventType.DomContentLoaded,\n        data: {}\n      }));\n    }));\n\n    var observe_1 = function observe_1(doc) {\n      var _a;\n\n      return initObservers({\n        mutationCb: wrappedMutationEmit,\n        mousemoveCb: function mousemoveCb(positions, source) {\n          return wrappedEmit(wrapEvent({\n            type: EventType.IncrementalSnapshot,\n            data: {\n              source: source,\n              positions: positions\n            }\n          }));\n        },\n        mouseInteractionCb: function mouseInteractionCb(d) {\n          return wrappedEmit(wrapEvent({\n            type: EventType.IncrementalSnapshot,\n            data: __assign({\n              source: IncrementalSource.MouseInteraction\n            }, d)\n          }));\n        },\n        scrollCb: wrappedScrollEmit,\n        viewportResizeCb: function viewportResizeCb(d) {\n          return wrappedEmit(wrapEvent({\n            type: EventType.IncrementalSnapshot,\n            data: __assign({\n              source: IncrementalSource.ViewportResize\n            }, d)\n          }));\n        },\n        inputCb: function inputCb(v) {\n          return wrappedEmit(wrapEvent({\n            type: EventType.IncrementalSnapshot,\n            data: __assign({\n              source: IncrementalSource.Input\n            }, v)\n          }));\n        },\n        mediaInteractionCb: function mediaInteractionCb(p) {\n          return wrappedEmit(wrapEvent({\n            type: EventType.IncrementalSnapshot,\n            data: __assign({\n              source: IncrementalSource.MediaInteraction\n            }, p)\n          }));\n        },\n        styleSheetRuleCb: function styleSheetRuleCb(r) {\n          return wrappedEmit(wrapEvent({\n            type: EventType.IncrementalSnapshot,\n            data: __assign({\n              source: IncrementalSource.StyleSheetRule\n            }, r)\n          }));\n        },\n        styleDeclarationCb: function styleDeclarationCb(r) {\n          return wrappedEmit(wrapEvent({\n            type: EventType.IncrementalSnapshot,\n            data: __assign({\n              source: IncrementalSource.StyleDeclaration\n            }, r)\n          }));\n        },\n        canvasMutationCb: wrappedCanvasMutationEmit,\n        fontCb: function fontCb(p) {\n          return wrappedEmit(wrapEvent({\n            type: EventType.IncrementalSnapshot,\n            data: __assign({\n              source: IncrementalSource.Font\n            }, p)\n          }));\n        },\n        blockClass: blockClass,\n        ignoreClass: ignoreClass,\n        maskTextClass: maskTextClass,\n        maskTextSelector: maskTextSelector,\n        maskInputOptions: maskInputOptions,\n        inlineStylesheet: inlineStylesheet,\n        sampling: sampling,\n        recordCanvas: recordCanvas,\n        inlineImages: inlineImages,\n        userTriggeredOnInput: userTriggeredOnInput,\n        collectFonts: collectFonts,\n        doc: doc,\n        maskInputFn: maskInputFn,\n        maskTextFn: maskTextFn,\n        blockSelector: blockSelector,\n        slimDOMOptions: slimDOMOptions,\n        mirror: mirror,\n        iframeManager: iframeManager,\n        shadowDomManager: shadowDomManager,\n        canvasManager: canvasManager,\n        plugins: ((_a = plugins === null || plugins === void 0 ? void 0 : plugins.filter(function (p) {\n          return p.observer;\n        })) === null || _a === void 0 ? void 0 : _a.map(function (p) {\n          return {\n            observer: p.observer,\n            options: p.options,\n            callback: function callback(payload) {\n              return wrappedEmit(wrapEvent({\n                type: EventType.Plugin,\n                data: {\n                  plugin: p.name,\n                  payload: payload\n                }\n              }));\n            }\n          };\n        })) || []\n      }, hooks);\n    };\n\n    iframeManager.addLoadListener(function (iframeEl) {\n      handlers_1.push(observe_1(iframeEl.contentDocument));\n    });\n\n    var init_1 = function init_1() {\n      takeFullSnapshot();\n      handlers_1.push(observe_1(document));\n    };\n\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      init_1();\n    } else {\n      handlers_1.push(on('load', function () {\n        wrappedEmit(wrapEvent({\n          type: EventType.Load,\n          data: {}\n        }));\n        init_1();\n      }, window));\n    }\n\n    return function () {\n      handlers_1.forEach(function (h) {\n        return h();\n      });\n    };\n  } catch (error) {\n    console.warn(error);\n  }\n}\n\nrecord.addCustomEvent = function (tag, payload) {\n  if (!wrappedEmit) {\n    throw new Error('please add custom event after start recording');\n  }\n\n  wrappedEmit(wrapEvent({\n    type: EventType.Custom,\n    data: {\n      tag: tag,\n      payload: payload\n    }\n  }));\n};\n\nrecord.freezePage = function () {\n  mutationBuffers.forEach(function (buf) {\n    return buf.freeze();\n  });\n};\n\nrecord.takeFullSnapshot = function (isCheckout) {\n  if (!takeFullSnapshot) {\n    throw new Error('please take full snapshot after start recording');\n  }\n\n  takeFullSnapshot(isCheckout);\n};\n\nrecord.mirror = mirror;\nexport default record;","map":null,"metadata":{},"sourceType":"module"}