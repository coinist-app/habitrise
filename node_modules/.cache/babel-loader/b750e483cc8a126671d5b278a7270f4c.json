{"ast":null,"code":"import { __spreadArray, __read, __values } from '../../../../ext/tslib/tslib.es6.js';\nimport { CanvasContext } from '../../../types.js';\nimport { patch, isBlocked, hookSetter } from '../../../utils.js';\nimport { saveWebGLVar, serializeArgs } from './serialize-args.js';\n\nfunction patchGLPrototype(prototype, type, cb, blockClass, mirror, win) {\n  var e_1, _a;\n\n  var handlers = [];\n  var props = Object.getOwnPropertyNames(prototype);\n\n  var _loop_1 = function _loop_1(prop) {\n    try {\n      if (typeof prototype[prop] !== 'function') {\n        return \"continue\";\n      }\n\n      var restoreHandler = patch(prototype, prop, function (original) {\n        return function () {\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          var result = original.apply(this, args);\n          saveWebGLVar(result, win, prototype);\n\n          if (!isBlocked(this.canvas, blockClass)) {\n            var id = mirror.getId(this.canvas);\n            var recordArgs = serializeArgs(__spreadArray([], __read(args), false), win, prototype);\n            var mutation = {\n              type: type,\n              property: prop,\n              args: recordArgs\n            };\n            cb(this.canvas, mutation);\n          }\n\n          return result;\n        };\n      });\n      handlers.push(restoreHandler);\n    } catch (_b) {\n      var hookHandler = hookSetter(prototype, prop, {\n        set: function set(v) {\n          cb(this.canvas, {\n            type: type,\n            property: prop,\n            args: [v],\n            setter: true\n          });\n        }\n      });\n      handlers.push(hookHandler);\n    }\n  };\n\n  try {\n    for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {\n      var prop = props_1_1.value;\n\n      _loop_1(prop);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return handlers;\n}\n\nfunction initCanvasWebGLMutationObserver(cb, win, blockClass, mirror) {\n  var handlers = [];\n  handlers.push.apply(handlers, __spreadArray([], __read(patchGLPrototype(win.WebGLRenderingContext.prototype, CanvasContext.WebGL, cb, blockClass, mirror, win)), false));\n\n  if (typeof win.WebGL2RenderingContext !== 'undefined') {\n    handlers.push.apply(handlers, __spreadArray([], __read(patchGLPrototype(win.WebGL2RenderingContext.prototype, CanvasContext.WebGL2, cb, blockClass, mirror, win)), false));\n  }\n\n  return function () {\n    handlers.forEach(function (h) {\n      return h();\n    });\n  };\n}\n\nexport default initCanvasWebGLMutationObserver;","map":null,"metadata":{},"sourceType":"module"}