{"ast":null,"code":"import { __spreadArray, __read } from '../../ext/tslib/tslib.es6.js';\nvar StyleRuleType;\n\n(function (StyleRuleType) {\n  StyleRuleType[StyleRuleType[\"Insert\"] = 0] = \"Insert\";\n  StyleRuleType[StyleRuleType[\"Remove\"] = 1] = \"Remove\";\n  StyleRuleType[StyleRuleType[\"Snapshot\"] = 2] = \"Snapshot\";\n  StyleRuleType[StyleRuleType[\"SetProperty\"] = 3] = \"SetProperty\";\n  StyleRuleType[StyleRuleType[\"RemoveProperty\"] = 4] = \"RemoveProperty\";\n})(StyleRuleType || (StyleRuleType = {}));\n\nfunction getNestedRule(rules, position) {\n  var rule = rules[position[0]];\n\n  if (position.length === 1) {\n    return rule;\n  } else {\n    return getNestedRule(rule.cssRules[position[1]].cssRules, position.slice(2));\n  }\n}\n\nfunction getPositionsAndIndex(nestedIndex) {\n  var positions = __spreadArray([], __read(nestedIndex), false);\n\n  var index = positions.pop();\n  return {\n    positions: positions,\n    index: index\n  };\n}\n\nfunction applyVirtualStyleRulesToNode(storedRules, styleNode) {\n  var sheet = styleNode.sheet;\n\n  if (!sheet) {\n    return;\n  }\n\n  storedRules.forEach(function (rule) {\n    if (rule.type === StyleRuleType.Insert) {\n      try {\n        if (Array.isArray(rule.index)) {\n          var _a = getPositionsAndIndex(rule.index),\n              positions = _a.positions,\n              index = _a.index;\n\n          var nestedRule = getNestedRule(sheet.cssRules, positions);\n          nestedRule.insertRule(rule.cssText, index);\n        } else {\n          sheet.insertRule(rule.cssText, rule.index);\n        }\n      } catch (e) {}\n    } else if (rule.type === StyleRuleType.Remove) {\n      try {\n        if (Array.isArray(rule.index)) {\n          var _b = getPositionsAndIndex(rule.index),\n              positions = _b.positions,\n              index = _b.index;\n\n          var nestedRule = getNestedRule(sheet.cssRules, positions);\n          nestedRule.deleteRule(index || 0);\n        } else {\n          sheet.deleteRule(rule.index);\n        }\n      } catch (e) {}\n    } else if (rule.type === StyleRuleType.Snapshot) {\n      restoreSnapshotOfStyleRulesToNode(rule.cssTexts, styleNode);\n    } else if (rule.type === StyleRuleType.SetProperty) {\n      var nativeRule = getNestedRule(sheet.cssRules, rule.index);\n      nativeRule.style.setProperty(rule.property, rule.value, rule.priority);\n    } else if (rule.type === StyleRuleType.RemoveProperty) {\n      var nativeRule = getNestedRule(sheet.cssRules, rule.index);\n      nativeRule.style.removeProperty(rule.property);\n    }\n  });\n}\n\nfunction restoreSnapshotOfStyleRulesToNode(cssTexts, styleNode) {\n  var _a;\n\n  try {\n    var existingRules = Array.from(((_a = styleNode.sheet) === null || _a === void 0 ? void 0 : _a.cssRules) || []).map(function (rule) {\n      return rule.cssText;\n    });\n    var existingRulesReversed = Object.entries(existingRules).reverse();\n    var lastMatch_1 = existingRules.length;\n    existingRulesReversed.forEach(function (_a) {\n      var _b;\n\n      var _c = __read(_a, 2),\n          index = _c[0],\n          rule = _c[1];\n\n      var indexOf = cssTexts.indexOf(rule);\n\n      if (indexOf === -1 || indexOf > lastMatch_1) {\n        try {\n          (_b = styleNode.sheet) === null || _b === void 0 ? void 0 : _b.deleteRule(Number(index));\n        } catch (e) {}\n      }\n\n      lastMatch_1 = indexOf;\n    });\n    cssTexts.forEach(function (cssText, index) {\n      var _a, _b, _c;\n\n      try {\n        if (((_b = (_a = styleNode.sheet) === null || _a === void 0 ? void 0 : _a.cssRules[index]) === null || _b === void 0 ? void 0 : _b.cssText) !== cssText) {\n          (_c = styleNode.sheet) === null || _c === void 0 ? void 0 : _c.insertRule(cssText, index);\n        }\n      } catch (e) {}\n    });\n  } catch (e) {}\n}\n\nfunction storeCSSRules(parentElement, virtualStyleRulesMap) {\n  var _a;\n\n  try {\n    var cssTexts = Array.from(((_a = parentElement.sheet) === null || _a === void 0 ? void 0 : _a.cssRules) || []).map(function (rule) {\n      return rule.cssText;\n    });\n    virtualStyleRulesMap.set(parentElement, [{\n      type: StyleRuleType.Snapshot,\n      cssTexts: cssTexts\n    }]);\n  } catch (e) {}\n}\n\nexport { StyleRuleType, applyVirtualStyleRulesToNode, getNestedRule, getPositionsAndIndex, storeCSSRules };","map":null,"metadata":{},"sourceType":"module"}