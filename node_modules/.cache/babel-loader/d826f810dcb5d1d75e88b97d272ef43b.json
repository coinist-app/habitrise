{"ast":null,"code":"import { __spreadArray, __read } from '../../../../ext/tslib/tslib.es6.js';\nimport { patch, isBlocked } from '../../../utils.js';\n\nfunction initCanvasContextObserver(win, blockClass) {\n  var handlers = [];\n\n  try {\n    var restoreHandler = patch(win.HTMLCanvasElement.prototype, 'getContext', function (original) {\n      return function (contextType) {\n        var args = [];\n\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments[_i];\n        }\n\n        if (!isBlocked(this, blockClass)) {\n          if (!('__context' in this)) this.__context = contextType;\n        }\n\n        return original.apply(this, __spreadArray([contextType], __read(args), false));\n      };\n    });\n    handlers.push(restoreHandler);\n  } catch (_a) {\n    console.error('failed to patch HTMLCanvasElement.prototype.getContext');\n  }\n\n  return function () {\n    handlers.forEach(function (h) {\n      return h();\n    });\n  };\n}\n\nexport default initCanvasContextObserver;","map":null,"metadata":{},"sourceType":"module"}