{"ast":null,"code":"import { __values, __spreadArray, __read } from '../../../../ext/tslib/tslib.es6.js';\nimport { CanvasContext } from '../../../types.js';\nimport { patch, isBlocked, hookSetter } from '../../../utils.js';\n\nfunction initCanvas2DMutationObserver(cb, win, blockClass, mirror) {\n  var e_1, _a;\n\n  var handlers = [];\n  var props2D = Object.getOwnPropertyNames(win.CanvasRenderingContext2D.prototype);\n\n  var _loop_1 = function _loop_1(prop) {\n    try {\n      if (typeof win.CanvasRenderingContext2D.prototype[prop] !== 'function') {\n        return \"continue\";\n      }\n\n      var restoreHandler = patch(win.CanvasRenderingContext2D.prototype, prop, function (original) {\n        return function () {\n          var _this = this;\n\n          var args = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n\n          if (!isBlocked(this.canvas, blockClass)) {\n            setTimeout(function () {\n              var recordArgs = __spreadArray([], __read(args), false);\n\n              if (prop === 'drawImage') {\n                if (recordArgs[0] && recordArgs[0] instanceof HTMLCanvasElement) {\n                  var canvas = recordArgs[0];\n                  var ctx = canvas.getContext('2d');\n                  var imgd = ctx === null || ctx === void 0 ? void 0 : ctx.getImageData(0, 0, canvas.width, canvas.height);\n                  var pix = imgd === null || imgd === void 0 ? void 0 : imgd.data;\n                  recordArgs[0] = JSON.stringify(pix);\n                }\n              }\n\n              cb(_this.canvas, {\n                type: CanvasContext['2D'],\n                property: prop,\n                args: recordArgs\n              });\n            }, 0);\n          }\n\n          return original.apply(this, args);\n        };\n      });\n      handlers.push(restoreHandler);\n    } catch (_b) {\n      var hookHandler = hookSetter(win.CanvasRenderingContext2D.prototype, prop, {\n        set: function set(v) {\n          cb(this.canvas, {\n            type: CanvasContext['2D'],\n            property: prop,\n            args: [v],\n            setter: true\n          });\n        }\n      });\n      handlers.push(hookHandler);\n    }\n  };\n\n  try {\n    for (var props2D_1 = __values(props2D), props2D_1_1 = props2D_1.next(); !props2D_1_1.done; props2D_1_1 = props2D_1.next()) {\n      var prop = props2D_1_1.value;\n\n      _loop_1(prop);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (props2D_1_1 && !props2D_1_1.done && (_a = props2D_1.return)) _a.call(props2D_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return function () {\n    handlers.forEach(function (h) {\n      return h();\n    });\n  };\n}\n\nexport default initCanvas2DMutationObserver;","map":null,"metadata":{},"sourceType":"module"}