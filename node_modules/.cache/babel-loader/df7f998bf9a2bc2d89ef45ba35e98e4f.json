{"ast":null,"code":"/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nfunction t(t, n) {\n  var e = \"function\" == typeof Symbol && t[Symbol.iterator];\n  if (!e) return t;\n  var r,\n      o,\n      i = e.call(t),\n      a = [];\n\n  try {\n    for (; (void 0 === n || n-- > 0) && !(r = i.next()).done;) {\n      a.push(r.value);\n    }\n  } catch (t) {\n    o = {\n      error: t\n    };\n  } finally {\n    try {\n      r && !r.done && (e = i.return) && e.call(i);\n    } finally {\n      if (o) throw o.error;\n    }\n  }\n\n  return a;\n}\n\nvar n;\n!function (t) {\n  t[t.NotStarted = 0] = \"NotStarted\", t[t.Running = 1] = \"Running\", t[t.Stopped = 2] = \"Stopped\";\n}(n || (n = {}));\nvar e = {\n  type: \"xstate.init\"\n};\n\nfunction r(t) {\n  return void 0 === t ? [] : [].concat(t);\n}\n\nfunction o(t) {\n  return {\n    type: \"xstate.assign\",\n    assignment: t\n  };\n}\n\nfunction i(t, n) {\n  return \"string\" == typeof (t = \"string\" == typeof t && n && n[t] ? n[t] : t) ? {\n    type: t\n  } : \"function\" == typeof t ? {\n    type: t.name,\n    exec: t\n  } : t;\n}\n\nfunction a(t) {\n  return function (n) {\n    return t === n;\n  };\n}\n\nfunction u(t) {\n  return \"string\" == typeof t ? {\n    type: t\n  } : t;\n}\n\nfunction c(t, n) {\n  return {\n    value: t,\n    context: n,\n    actions: [],\n    changed: !1,\n    matches: a(t)\n  };\n}\n\nfunction f(t, n, e) {\n  var r = n,\n      o = !1;\n  return [t.filter(function (t) {\n    if (\"xstate.assign\" === t.type) {\n      o = !0;\n      var n = Object.assign({}, r);\n      return \"function\" == typeof t.assignment ? n = t.assignment(r, e) : Object.keys(t.assignment).forEach(function (o) {\n        n[o] = \"function\" == typeof t.assignment[o] ? t.assignment[o](r, e) : t.assignment[o];\n      }), r = n, !1;\n    }\n\n    return !0;\n  }), r, o];\n}\n\nfunction s(n, o) {\n  void 0 === o && (o = {});\n  var s = t(f(r(n.states[n.initial].entry).map(function (t) {\n    return i(t, o.actions);\n  }), n.context, e), 2),\n      l = s[0],\n      v = s[1],\n      y = {\n    config: n,\n    _options: o,\n    initialState: {\n      value: n.initial,\n      actions: l,\n      context: v,\n      matches: a(n.initial)\n    },\n    transition: function transition(e, o) {\n      var s,\n          l,\n          v = \"string\" == typeof e ? {\n        value: e,\n        context: n.context\n      } : e,\n          p = v.value,\n          g = v.context,\n          d = u(o),\n          x = n.states[p];\n\n      if (x.on) {\n        var m = r(x.on[d.type]);\n\n        try {\n          for (var h = function (t) {\n            var n = \"function\" == typeof Symbol && Symbol.iterator,\n                e = n && t[n],\n                r = 0;\n            if (e) return e.call(t);\n            if (t && \"number\" == typeof t.length) return {\n              next: function next() {\n                return t && r >= t.length && (t = void 0), {\n                  value: t && t[r++],\n                  done: !t\n                };\n              }\n            };\n            throw new TypeError(n ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n          }(m), b = h.next(); !b.done; b = h.next()) {\n            var S = b.value;\n            if (void 0 === S) return c(p, g);\n\n            var w = \"string\" == typeof S ? {\n              target: S\n            } : S,\n                j = w.target,\n                E = w.actions,\n                R = void 0 === E ? [] : E,\n                N = w.cond,\n                O = void 0 === N ? function () {\n              return !0;\n            } : N,\n                _ = void 0 === j,\n                k = null != j ? j : p,\n                T = n.states[k];\n\n            if (O(g, d)) {\n              var q = t(f((_ ? r(R) : [].concat(x.exit, R, T.entry).filter(function (t) {\n                return t;\n              })).map(function (t) {\n                return i(t, y._options.actions);\n              }), g, d), 3),\n                  z = q[0],\n                  A = q[1],\n                  B = q[2],\n                  C = null != j ? j : p;\n              return {\n                value: C,\n                context: A,\n                actions: z,\n                changed: j !== p || z.length > 0 || B,\n                matches: a(C)\n              };\n            }\n          }\n        } catch (t) {\n          s = {\n            error: t\n          };\n        } finally {\n          try {\n            b && !b.done && (l = h.return) && l.call(h);\n          } finally {\n            if (s) throw s.error;\n          }\n        }\n      }\n\n      return c(p, g);\n    }\n  };\n  return y;\n}\n\nvar l = function l(t, n) {\n  return t.actions.forEach(function (e) {\n    var r = e.exec;\n    return r && r(t.context, n);\n  });\n};\n\nfunction v(t) {\n  var r = t.initialState,\n      o = n.NotStarted,\n      i = new Set(),\n      c = {\n    _machine: t,\n    send: function send(e) {\n      o === n.Running && (r = t.transition(r, e), l(r, u(e)), i.forEach(function (t) {\n        return t(r);\n      }));\n    },\n    subscribe: function subscribe(t) {\n      return i.add(t), t(r), {\n        unsubscribe: function unsubscribe() {\n          return i.delete(t);\n        }\n      };\n    },\n    start: function start(i) {\n      if (i) {\n        var u = \"object\" == typeof i ? i : {\n          context: t.config.context,\n          value: i\n        };\n        r = {\n          value: u.value,\n          actions: [],\n          context: u.context,\n          matches: a(u.value)\n        };\n      }\n\n      return o = n.Running, l(r, e), c;\n    },\n    stop: function stop() {\n      return o = n.Stopped, i.clear(), c;\n    },\n\n    get state() {\n      return r;\n    },\n\n    get status() {\n      return o;\n    }\n\n  };\n  return c;\n}\n\nexport { n as InterpreterStatus, o as assign, s as createMachine, v as interpret };","map":null,"metadata":{},"sourceType":"module"}