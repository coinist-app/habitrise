{"ast":null,"code":"var StackFrame = function () {\n  function StackFrame(obj) {\n    this.fileName = obj.fileName || '';\n    this.functionName = obj.functionName || '';\n    this.lineNumber = obj.lineNumber;\n    this.columnNumber = obj.columnNumber;\n  }\n\n  StackFrame.prototype.toString = function () {\n    var lineNumber = this.lineNumber || '';\n    var columnNumber = this.columnNumber || '';\n\n    if (this.functionName) {\n      return this.functionName + ' (' + this.fileName + ':' + lineNumber + ':' + columnNumber + ')';\n    }\n\n    return this.fileName + ':' + lineNumber + ':' + columnNumber;\n  };\n\n  return StackFrame;\n}();\n\nvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+:\\d+/;\nvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m;\nvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code])?$/;\nvar ErrorStackParser = {\n  parse: function parse(error) {\n    if (!error) {\n      return [];\n    }\n\n    if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {\n      return this.parseOpera(error);\n    } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n      return this.parseV8OrIE(error);\n    } else if (error.stack) {\n      return this.parseFFOrSafari(error);\n    } else {\n      throw new Error('Cannot parse given Error object');\n    }\n  },\n  extractLocation: function extractLocation(urlLike) {\n    if (urlLike.indexOf(':') === -1) {\n      return [urlLike];\n    }\n\n    var regExp = /(.+?)(?::(\\d+))?(?::(\\d+))?$/;\n    var parts = regExp.exec(urlLike.replace(/[()]/g, ''));\n    if (!parts) throw new Error(\"Cannot parse given url: \".concat(urlLike));\n    return [parts[1], parts[2] || undefined, parts[3] || undefined];\n  },\n  parseV8OrIE: function parseV8OrIE(error) {\n    var filtered = error.stack.split('\\n').filter(function (line) {\n      return !!line.match(CHROME_IE_STACK_REGEXP);\n    }, this);\n    return filtered.map(function (line) {\n      if (line.indexOf('(eval ') > -1) {\n        line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^()]*)|(\\),.*$)/g, '');\n      }\n\n      var sanitizedLine = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(');\n      var location = sanitizedLine.match(/ (\\((.+):(\\d+):(\\d+)\\)$)/);\n      sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine;\n      var tokens = sanitizedLine.split(/\\s+/).slice(1);\n      var locationParts = this.extractLocation(location ? location[1] : tokens.pop());\n      var functionName = tokens.join(' ') || undefined;\n      var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];\n      return new StackFrame({\n        functionName: functionName,\n        fileName: fileName,\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2]\n      });\n    }, this);\n  },\n  parseFFOrSafari: function parseFFOrSafari(error) {\n    var filtered = error.stack.split('\\n').filter(function (line) {\n      return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n    }, this);\n    return filtered.map(function (line) {\n      if (line.indexOf(' > eval') > -1) {\n        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, ':$1');\n      }\n\n      if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\n        return new StackFrame({\n          functionName: line\n        });\n      } else {\n        var functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n        var matches = line.match(functionNameRegex);\n        var functionName = matches && matches[1] ? matches[1] : undefined;\n        var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));\n        return new StackFrame({\n          functionName: functionName,\n          fileName: locationParts[0],\n          lineNumber: locationParts[1],\n          columnNumber: locationParts[2]\n        });\n      }\n    }, this);\n  },\n  parseOpera: function parseOpera(e) {\n    if (!e.stacktrace || e.message.indexOf('\\n') > -1 && e.message.split('\\n').length > e.stacktrace.split('\\n').length) {\n      return this.parseOpera9(e);\n    } else if (!e.stack) {\n      return this.parseOpera10(e);\n    } else {\n      return this.parseOpera11(e);\n    }\n  },\n  parseOpera9: function parseOpera9(e) {\n    var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n    var lines = e.message.split('\\n');\n    var result = [];\n\n    for (var i = 2, len = lines.length; i < len; i += 2) {\n      var match = lineRE.exec(lines[i]);\n\n      if (match) {\n        result.push(new StackFrame({\n          fileName: match[2],\n          lineNumber: parseFloat(match[1])\n        }));\n      }\n    }\n\n    return result;\n  },\n  parseOpera10: function parseOpera10(e) {\n    var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n    var lines = e.stacktrace.split('\\n');\n    var result = [];\n\n    for (var i = 0, len = lines.length; i < len; i += 2) {\n      var match = lineRE.exec(lines[i]);\n\n      if (match) {\n        result.push(new StackFrame({\n          functionName: match[3] || undefined,\n          fileName: match[2],\n          lineNumber: parseFloat(match[1])\n        }));\n      }\n    }\n\n    return result;\n  },\n  parseOpera11: function parseOpera11(error) {\n    var filtered = error.stack.split('\\n').filter(function (line) {\n      return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\n    }, this);\n    return filtered.map(function (line) {\n      var tokens = line.split('@');\n      var locationParts = this.extractLocation(tokens.pop());\n      var functionCall = tokens.shift() || '';\n      var functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, '$2').replace(/\\([^)]*\\)/g, '') || undefined;\n      return new StackFrame({\n        functionName: functionName,\n        fileName: locationParts[0],\n        lineNumber: locationParts[1],\n        columnNumber: locationParts[2]\n      });\n    }, this);\n  }\n};\nexport { ErrorStackParser, StackFrame };","map":null,"metadata":{},"sourceType":"module"}