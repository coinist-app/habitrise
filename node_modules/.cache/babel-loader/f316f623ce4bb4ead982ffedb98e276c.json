{"ast":null,"code":"import { __values, __spreadArray, __read } from '../../../../ext/tslib/tslib.es6.js';\nimport { PLUGIN_NAME } from '../record/index.js';\nimport { EventType, IncrementalSource } from '../../../types.js';\nvar ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\nvar defaultLogConfig = {\n  level: ['assert', 'clear', 'count', 'countReset', 'debug', 'dir', 'dirxml', 'error', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'table', 'time', 'timeEnd', 'timeLog', 'trace', 'warn'],\n  replayLogger: undefined\n};\n\nvar LogReplayPlugin = function () {\n  function LogReplayPlugin(config) {\n    this.config = Object.assign(defaultLogConfig, config);\n  }\n\n  LogReplayPlugin.prototype.getConsoleLogger = function () {\n    var e_1, _a;\n\n    var _this = this;\n\n    var replayLogger = {};\n\n    var _loop_1 = function _loop_1(level) {\n      if (level === 'trace') {\n        replayLogger[level] = function (data) {\n          var logger = console.log[ORIGINAL_ATTRIBUTE_NAME] ? console.log[ORIGINAL_ATTRIBUTE_NAME] : console.log;\n          logger.apply(void 0, __spreadArray(__spreadArray([], __read(data.payload.map(function (s) {\n            return JSON.parse(s);\n          })), false), [_this.formatMessage(data)], false));\n        };\n      } else {\n        replayLogger[level] = function (data) {\n          var logger = console[level][ORIGINAL_ATTRIBUTE_NAME] ? console[level][ORIGINAL_ATTRIBUTE_NAME] : console[level];\n          logger.apply(void 0, __spreadArray(__spreadArray([], __read(data.payload.map(function (s) {\n            return JSON.parse(s);\n          })), false), [_this.formatMessage(data)], false));\n        };\n      }\n    };\n\n    try {\n      for (var _b = __values(this.config.level), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var level = _c.value;\n\n        _loop_1(level);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return replayLogger;\n  };\n\n  LogReplayPlugin.prototype.formatMessage = function (data) {\n    if (data.trace.length === 0) {\n      return '';\n    }\n\n    var stackPrefix = '\\n\\tat ';\n    var result = stackPrefix;\n    result += data.trace.join(stackPrefix);\n    return result;\n  };\n\n  return LogReplayPlugin;\n}();\n\nvar getReplayConsolePlugin = function getReplayConsolePlugin(options) {\n  var replayLogger = (options === null || options === void 0 ? void 0 : options.replayLogger) || new LogReplayPlugin(options).getConsoleLogger();\n  return {\n    handler: function handler(event, _isSync, context) {\n      var logData = null;\n\n      if (event.type === EventType.IncrementalSnapshot && event.data.source === IncrementalSource.Log) {\n        logData = event.data;\n      } else if (event.type === EventType.Plugin && event.data.plugin === PLUGIN_NAME) {\n        logData = event.data.payload;\n      }\n\n      if (logData) {\n        try {\n          if (typeof replayLogger[logData.level] === 'function') {\n            replayLogger[logData.level](logData);\n          }\n        } catch (error) {\n          if (context.replayer.config.showWarning) {\n            console.warn(error);\n          }\n        }\n      }\n    }\n  };\n};\n\nexport { getReplayConsolePlugin };","map":null,"metadata":{},"sourceType":"module"}